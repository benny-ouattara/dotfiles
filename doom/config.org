#+TITLE: Config
#+STARTUP: show2levels
* dependencies
ensure that we have these libraries loaded before proceeding
#+begin_src emacs-lisp
(require 'f)
(require 's)
(require 'dash)
#+end_src

* variables
** rfc
#+begin_src emacs-lisp
(setq rfc-mode-directory (expand-file-name "~/rfc/"))
#+end_src

** user
#+begin_src emacs-lisp
(setq
 user-full-name "Ben O"
 user-mail-address "benny.ouattara@gmail.com"
 home-dir (getenv "HOME"))
#+end_src

** projects
#+begin_src emacs-lisp
(setq
 project-dir "~/Code"
 project-prefix "kata"
 skeletor-project-directory project-dir
 skeletor-user-directory (concat doom-private-dir "templates")
 skeletor-completing-read-function 'ivy-read)
#+end_src

** org agenda
#+begin_src emacs-lisp
(setq
 org-agenda-skip-scheduled-if-done t
 org-super-agenda-groups '((:name "Today"
                            :time-grid t
                            :scheduled today)
                           (:name "Due today"
                            :deadline today)
                           (:name "Important"
                            :priority "A")
                           (:name "Overdue"
                            :deadline past)
                           (:name "Due soon"
                            :deadline future)
                           (:name "Big Outcomes"
                            :tag "bo")))
#+end_src

** org pomodoro
#+begin_src emacs-lisp
(setq
 org-pomodoro-length 45
 org-pomodoro-short-break-length 15)
#+end_src

* appearance
** variable
#+begin_src emacs-lisp :results silent
(use-package! doom-nano-modeline
     :config
     (doom-nano-modeline-mode 1)
     (global-hide-mode-line-mode 1))

(pcase (user-login-name)
  ("zangao" (setq
             doom-font (font-spec :family "Iosevka" :size 21 :weight 'normal)
             doom-big-font (font-spec :family "Iosevka" :size 27)
             doom-theme 'doom-nano-light)
   ;; (after! doom-themes
   ;;   (load-theme 'doom-nano-light t))
   )
  ("bouattara" (setq
                doom-font (font-spec :family "Iosevka" :size 19 :weight 'normal)
                doom-big-font (font-spec :family "Iosevka" :size 25)
                doom-theme 'doom-nano-light))
  ("benouattara" (setq
                  doom-font (font-spec :family "Iosevka" :size 19 :weight 'normal)
                  doom-big-font (font-spec :family "Iosevka" :size 25)
                  doom-theme 'doom-nano-light))
  ("ben" (setq
          doom-font (font-spec :family "Iosevka" :size 23 :weight 'normal)
          doom-big-font (font-spec :family "Iosevka" :size 29)
          doom-theme 'doom-nano-light)))

(setq
 mac-command-modifier 'meta
 ns-command-modifier 'meta
 confirm-kill-emacs nil
 evil-insert-state-cursor 'bar
 evil-move-cursor-back nil
 display-line-numbers-type 'relative
 fancy-splash-image (expand-file-name "splash.png" doom-private-dir))

(menu-bar-mode -1)
(rainbow-mode)
#+end_src

** auto theme management
Set auto theme based on system appearance setting with default themes
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist
             '(ns-appearance . dark))

;; (defun beno--auto-theme (appearance)
;;   "Load theme, taking current system APPEARANCE into consideration."
;;   (mapc #'disable-theme custom-enabled-themes)
;;   (pcase appearance
;;     ('light (load-theme 'doom-one-light t))
;;     ('dark (load-theme 'doom-snazzy t))))

(add-hook 'ns-system-appearance-change-functions #'beno--auto-theme)
#+end_src

** TTY frames theme management
Manages look and feel on tty frames i.e emacs in the terminal
#+begin_src emacs-lisp
(when (not (display-graphic-p))
  (progn
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (mapc #'disable-theme custom-enabled-themes)
    (setq doom-theme 'doom-acario-light
          evil-emacs-state-cursor '("red" box)
          evil-normal-state-cursor '("black" box)
          evil-visual-state-cursor '("black" box)
          evil-insert-state-cursor '("red" bar)
          evil-motion-state-cursor '("gray" box))))
#+end_src

* org mode
** variable
#+begin_src emacs-lisp
(setq
 ;; org-ellipsis " ▾ "
 ;; org-ellipsis " ⤵ "
 ;; org-ellipsis " ↓ "
 ;; org-ellipsis " ∵ "
 ;; org-ellipsis " ⌄ "
 ;; org-ellipsis " ⁂ "
 ;; org-startup-folded 'content
 org-startup-folded 'show2levels
 org-auto-align-tags nil
 org-roam-v2-ack t
 +org-roam-open-buffer-on-find-file nil
 sync-dir "~/Sync/"
 org-directory (concat sync-dir "org")
 org-spotify-directory (concat org-directory "/spotify")
 org-mime-export-options '(:section-numbers nil
                           :with-author nil
                           :with-toc nil)
 org-agenda-files (ignore-errors (directory-files org-directory t "\\.org$" t))
 ;; org-ellipsis " ≡ "
 org-ellipsis " ▾"
 org-hide-emphasis-markers t
 org-tags-column -80
 org-log-done 'time
 org-refile-targets (quote ((nil :maxlevel . 3)))
 +org-capture-todo-file "tasks.org"
 org-exploration-file (concat org-directory
                              "/"
                              "exploration.org")
 org-design-file (concat org-directory
                         "/"
                         "design.org"))
#+end_src

* org prettify block names
 #+begin_src emacs-lisp
(setq-hook! org-mode
  prettify-symbols-alist '(("#+end_quote" . "”")
                           ("#+END_QUOTE" . "”")
                           ("#+begin_quote" . "“")
                           ("#+BEGIN_QUOTE" . "“")
                           ("#+end_src" . "«")
                           ("#+END_SRC" . "«")
                           ("#+begin_src" . "»")
                           ("#+BEGIN_SRC" . "»")
                           ("#+name:" . "»")
                           ("#+NAME:" . "»")))
#+end_src

* org-capture-templates
#+begin_src emacs-lisp
(after! org-capture
  (pushnew! org-capture-templates
            '("e" "Explore domain" entry
              (file+headline org-exploration-file "Inbox")
              "* domain: %? \n** concepts\n** concepts relations\n** implications\n** problem statement\n" :prepend t))
  (pushnew! org-capture-templates
            '("d" "Design problem space" entry
              (file+headline org-design-file "Inbox")
              "* domain: %? \n** observe situation\n** diagnose possible problems\n** delimit the problem you are going to solve\n** approaches to the problem\n** implementation \n *** story\n*** pseudo\n** develop\n" :prepend t)))
#+end_src

* org fancy priority
#+begin_src emacs-lisp
(after! org-fancy-priorities
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src

* org-roam
** templates
#+begin_src emacs-lisp
(setq org-roam-dailies-capture-templates '(("d" "default" plain
                                            "* %?"
                                            :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
                                            :unnarrowed t)
                                           ("a" "daily plan" plain
                                            (file "~/Code/dotfiles/doom/snippets/org-roam/daily.org")
                                            :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
(setq org-roam-capture-templates '(("d" "default" plain
                                    (file "~/Code/dotfiles/doom/snippets/org-roam/default.org")
                                    :target (file+head  "%<%Y%m%d%H%M%S>-${slug}.org"  "#+title: ${title}\n#+date: %U\n")
                                    :unnarrowed t)
                                   ("l" "programming language" plain
                                    (file "~/Code/dotfiles/doom/snippets/org-roam/programming.org")
                                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: programming\n")
                                    :unnarrowed t)
                                   ("b" "book notes" plain
                                    (file "~/Code/dotfiles/doom/snippets/org-roam/book.org")
                                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: book\n")
                                    :unnarrowed t)
                                   ("p" "project" plain
                                    (file "~/Code/dotfiles/doom/snippets/org-roam/project.org")
                                    :target (file+head  "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: project\n")
                                    :unnarrowed t)
                                   ("c" "code" plain
                                    (file "~/Code/dotfiles/doom/snippets/org-roam/code.org")
                                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"  "#+title: ${title}\n#+date: %U\n#+filetags: interview\n")
                                    :unnarrowed t)))
#+end_src

** copy done tasks to today's daily
#+begin_src emacs-lisp
(defun beno/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
          '(("t" "tasks" entry "%?"
             :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Completed Tasks" today-file nil pos)))))

(after! org
  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "DONE")
                   (beno/org-roam-copy-todo-to-today)))))
#+end_src

* org journal
This should fix a [[https://github.com/bastibe/org-journal/issues/392][bug]] in org-journal where ~org-cycle~ doesn't work when adding a new entry

#+begin_src emacs-lisp
(setq org-fold-core-style 'overlays)

(after! org-journal
  (map! :leader :desc "Open current journal" "j" #'org-journal-open-current-journal-file))
#+end_src

* tramp
#+begin_src emacs-lisp
(setq
 tramp-histfile-override "/dev/null")

(when (not (file-exists-p (concat doom-cache-dir "tramp-histfile")))
  (make-empty-file (concat doom-cache-dir "tramp-histfile")))
#+end_src

* code indentation
Indentation of =2= for most programming languages
#+begin_src emacs-lisp
(defun beno--indent (n)
  (interactive "p")
  ;; applies to java, c and c++
  (setq c-basic-offset n)
  (setq coffee-tab-width n)
  (setq javascript-indent-level n)
  (setq typescript-indent-level n)
  (setq js-indent-level n)
  (setq js2-basic-offset n)
  (setq web-mode-markup-indent-offset n)
  (setq web-mode-css-indent-offset n)
  (setq web-mode-code-indent-offset n)
  (setq css-indent-offset n))

(beno--indent 2)
#+end_src

* keybindings
** workspace & windows keybindings
#+begin_src emacs-lisp
(map! :leader
      :desc "close current window"
      "0" #'evil-quit)

(map! :leader
      :desc "close other window"
      "9" #'delete-other-windows)

(map! :leader
      :desc "split with eshell"
      ">" #'beno--eshell-toggle-right)

(map! :desc "fuzzy search visible buffer"
      :leader
      "a" #'evil-avy-goto-char-2)

(map! :desc "line in visible buffer"
      :leader
      "A" #'avy-goto-line)

(map! :leader
      :desc "open file other window"
      "V" #'projectile-find-file-other-window)

(map! :leader
      :desc "open buffer other window"
      "v" #'switch-to-buffer-other-window)

(map! "C-s" #'consult-line)

(map! :leader
      :desc "delete buffer"
      "d" #'kill-buffer)

(map! :leader
      :desc "hide in level"
      "l" #'hs-hide-level)

(map! :leader
      :desc "show block"
      "L" #'hs-show-block)

(map! :leader
      :desc "find file at point"
      "/" #'find-file-at-point)

(map! :leader
      :desc "next workspace"
      "]" #'+workspace:switch-next)

(map! :leader
      :desc "previous workspace"
      "[" #'+workspace:switch-previous)

(map! :leader
      :desc "calendar"
      "o c" #'cfw:open-calendar-buffer)
#+end_src

** project management keybindings
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("o" . "open")
       (:prefix ("s" . "spotify")
        (:prefix ("p" . "projects")
         :desc "create java project" "j" #'create-java-project
         :desc "create scala project" "s" #'create-scala-project
         :desc "create clojure project" "c" #'create-clojure-project
         :desc "create common lisp project" "l" #'create-common-lisp-project
         :desc "delete project" "d" #'delete-project
         :desc "delete all test projects" "D" #'projects-cleanup))))
#+end_src

** maven keybindings
#+begin_src emacs-lisp
(map! :after cc-mode
      :map java-mode-map
      :localleader
      (:prefix ("c" . "Compile")
       :desc "Compile mvn project"  "c" (cmd! (beno--run-mvn-command "clean compile"))
       :desc "Verify mvn project"   "v" (cmd! (beno--run-mvn-command "clean verify"))
       :desc "Package mvn project"  "p" (cmd! (beno--run-mvn-command "clean package"))
       :desc "Package mvn project - skip tests"  "P" (cmd! (beno--run-mvn-command "-Dmaven.test.skip=true clean package"))
       :desc "Test mvn project"  "t" (cmd! (beno--run-mvn-command "clean test"))
       :desc "Integration test mvn project"  "i" (cmd! (beno--run-mvn-command "clean integration-test"))
       :desc "Run test"  "T" (cmd! (beno--run-mvn-command (call-interactively #'beno--mvn-test-to-run)))))
#+end_src

** better vertical motion keybindings
Using advices doesn't work for these, it gets stuck after the first call
#+begin_src emacs-lisp
(defun beno-evil-scroll-down ()
  (interactive)
  (evil-scroll-down evil-scroll-count)
  (evil-scroll-line-to-center nil))

(defun beno-evil-scroll-up ()
  (interactive)
  (evil-scroll-up evil-scroll-count)
  (evil-scroll-line-to-center nil))

(map! :n "C-d" #'beno-evil-scroll-down)
(map! :n "C-u" #'beno-evil-scroll-up)
#+end_src

* lsp
#+begin_src emacs-lisp
(setq
 lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml")
#+end_src

* java
** eglot
eglot is a minimal alternative to lsp-mode. However I haven't been able to
configure it to navigate to classpath dependencies. So I am not using it
for now. It will be a solid candidate when that is figured out since it doesn't
hang emacs as often as lsp-mode. Also eglot isn't java friendly. Integrating it
with java requires a lot of work done below.

eglot has gotten much better since it's been merged as the default emacs language server.
The setup below is no longer required. Language servers simply need to be on the PATH.
#+begin_src emacs-lisp
;; setup lsp server for eglot
;; eglot doesn't recognize ~ for user home directory
(setq lsp-jar (concat home-dir "/.emacs.d/.local/etc/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.6.400.v20210924-0641.jar"))

(defun set-lsp-jar ()
  (setenv "CLASSPATH" lsp-jar))

(add-hook 'java-mode-hook #'set-lsp-jar)
#+end_src

** lsp-mode
lsp-mode is the alternative to eglot that I am using now. It constantly hangs
emacs which is problematic but I haven't found a solution around it yet.

#+begin_src emacs-lisp
(setq  lsp-java-vmargs
       (list
        "-noverify"
        "-Xmx2G"
        "-Xms100m"
        "-Dsun.zip.disableMemoryMapping=true"
        "-XX:+UseG1GC"
        "-XX:+UseStringDeduplication"
        ))

#+end_src

#+begin_src emacs-lisp
;; breadcrumb is a nice feature to know about, not using it now
;; (after! lsp-mode
;;   (lsp-headerline-breadcrumb-mode))

;; makes lsp-mode a little more bearable: hide all the UI noise
(after! (lsp-mode lsp-ui)
  (setq lsp-ui-sideline-show-code-actions nil
        lsp-ui-doc-enable nil)
  (lsp-ui-doc-mode -1))
#+end_src

** switch jvm
Integrated solution to switching JVM, alternative to jenv. Sets CLASSPATH in
current session.
#+begin_src emacs-lisp
(setq java-dir "/Library/Java/JavaVirtualMachines")
(setq java-home-suffix "/Contents/Home")

(defun beno--switch-jvm (chosen-jvm)
  (interactive (list
                (ivy-completing-read "Choose JVM:"
                                     (-filter
                                      (lambda (filename) (and (not (equal filename "."))
                                                              (not (equal filename ".."))))
                                      (directory-files java-dir)))))
  (let ((old-env (getenv "JAVA_HOME"))
        (home-path (concat java-dir "/" chosen-jvm java-home-suffix)))
    (setenv "JAVA_HOME" home-path)))
#+end_src

** dap: debug adapter protocol
#+begin_src emacs-lisp
(after! dap-java
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  (dap-register-debug-template "Custom Runner"
                               (list :type "java"
                                     :request "launch"
                                     :args ""
                                     :vmArgs "-ea -Dmyapp.instance.name=myapp_1"
                                     :projectName "sp"
                                     :classPaths nil
                                     :mainClass ""
                                     :env '(("DEV" . "1")))))
#+end_src

* project lifecycle
** foundation
#+begin_src emacs-lisp
;; TODO: refactor project creation logic in a =macro=
(defun haikunate (token-range &optional prefix)
  "Generate random descriptive name.
A random adjective is chosen followed by a random nound and a random number."
  (let* ((adjectives '(autumn hidden bitter misty silent empty dry dark summer
                              icy delicate quiet white cool spring winter patient
                              twilight dawn crimson wispy weathered blue billowing
                              broken cold damp falling frosty green long late lingering
                              bold little morning muddy old red rough still small
                              sparkling throbbing shy wandering withered wild black
                              young holy solitary fragrant aged snowy proud floral
                              restless divine polished ancient purple lively nameless))
         (nouns '(waterfall river breeze moon rain wind sea morning
                            snow lake sunset pine shadow leaf dawn glitter forest
                            hill cloud meadow sun glade bird brook butterfly
                            bush dew dust field fire flower firefly feather grass
                            haze mountain night pond darkness snowflake silence
                            sound sky shape surf thunder violet water wildflower
                            wave water resonance sun wood dream cherry tree fog
                            frost voice paper frog smoke star))
         (adjective (seq-random-elt adjectives))
         (noun (seq-random-elt nouns))
         (suffix (cl-random token-range)))
    (if prefix
        (format "%s-%s-%s-%d" prefix adjective noun suffix)
      (format "%s-%s-%d" adjective noun suffix))))

(defun haikens (limit token-range prefix)
  "Generate LIMIT random names."
  (-map (lambda (n) (haikunate token-range prefix)) (number-sequence 1 limit)))
#+end_src

** java projects
Create java/mvn project
#+begin_src emacs-lisp
(defun create-java-project (artifact-id)
  (interactive
   (list
    (ivy-read "Project name: "
              (haikens 4 100 project-prefix))))
  (let* ((default-directory project-dir)
         (arch-version "1.4")
         (group-id "com.example")
         (app-version "0.1")
         (app-dir (concat project-dir "/" artifact-id))
         (app-projectile-path (concat app-dir "/.projectile"))
         (cmd "mvn")
         (args (list "archetype:generate"
                     "-DarchetypeGroupId=org.apache.maven.archetypes"
                     "-DarchetypeArtifactId=maven-archetype-simple"
                     (format "-DarchetypeVersion=%s" arch-version)
                     (format "-DgroupId=%s" group-id)
                     (format "-DartifactId=%s" artifact-id)
                     (format "-Dversion=%s" app-version))))
    (if (executable-find "mvn")
        (progn (apply #'doom-call-process cmd args)
               (f-touch app-projectile-path)
               (projectile-discover-projects-in-search-path)
               (when (fboundp 'lsp-workspace-folders-add)
                 (lsp-workspace-folders-add app-dir))
               (message "created project %s" artifact-id))
      (user-error "executable %s not found" cmd))))
#+end_src

** scala projects
create scala/sbt project
#+begin_src emacs-lisp
(defun create-scala-project (name)
  (interactive
   (list
    (ivy-read "Project name: "
              (haikens 4 100 project-prefix))))
  (let* ((default-directory project-dir)
         (app-dir (concat project-dir "/" name))
         (app-projectile-path (concat app-dir "/.projectile"))
         (cmd "sbt")
         (args (list "new"
                     "scala/scala-seed.g8"
                     (format "--name=%s" name))))
    (if (executable-find cmd)
        (progn (apply #'doom-call-process cmd args)
               (f-touch app-projectile-path)
               (projectile-discover-projects-in-search-path)
               (message "created project %s" name))
      (user-error "executable %s not found" cmd))))
#+end_src

** clojure projects
Create clojure/lein project
#+begin_src emacs-lisp
(defun create-clojure-project (name)
  (interactive
   (list
    (ivy-read "Project name: "
              (haikens 4 100 project-prefix))))
  (let* ((default-directory project-dir)
         (app-dir (concat project-dir "/" name))
         (app-projectile-path (concat app-dir "/.projectile"))
         (cmd "lein")
         (args (list "new"
                     "app"
                     name)))
    (if (executable-find cmd)
        (progn (apply #'doom-call-process cmd args)
               (f-touch app-projectile-path)
               (projectile-discover-projects-in-search-path)
               (message "created project %s" name))
      (user-error "executable %s not found" cmd))))
#+end_src

** common lisp projects
Create common lisp project with quickproject
#+begin_src emacs-lisp
(defun create-common-lisp-project (name)
  (interactive
   (list
    (ivy-read "Project name: "
              (haikens 4 100 project-prefix))))
  (let* ((default-directory project-dir)
         (app-dir (concat project-dir "/" name))
         (app-projectile-path (concat app-dir "/.projectile"))
         (cmd "sbcl")
         (args (list "--non-interactive"
                     "--eval" "(ql:quickload :cl-project)"
                     "--eval" (format "(cl-project:make-project #p\"%s\" :author %s :email %s :depends-on '())" name "\"Ben O.\"" "\"benny.ouattara@gmail.com\""))))
    (unless (executable-find cmd)
      (user-error "executable %s not found" cmd))
    (let* ((result (apply #'doom-call-process cmd args))
           (status (car result)))
      (if (equal status 0)
          (progn
            (f-touch app-projectile-path)
            (projectile-discover-projects-in-search-path)
            (message "created project %s" name))
        (message (format "failed to create project. exit code %d" status))))))
#+end_src

** project deletion
Delete =haiken= projects
#+begin_src emacs-lisp
(defun delete-project (project-path)
  "Delete kata project.
Delete mvn project at PROJECT-PATH by removing project from lsp workspaces,
removing project from projectile and deleting project folders.
Beware using this command given that it's destructive and non reversible."
  (interactive
   (list
    (ivy-read "Project name: "
              (if counsel-projectile-remove-current-project
                  (projectile-relevant-known-projects)
                projectile-known-projects))))
  (let* ((project-name (car (last (s-split "/" (string-trim project-path "/" "/"))))))
    (progn (when (fboundp 'lsp-workspace-folders-remove)
             (lsp-workspace-folders-remove project-path))
           (when (+workspace-exists-p project-name)
             (+workspace-delete project-name))
           (projectile-remove-known-project (concat (string-trim-right project-path "/") "/"))
           (f-delete project-path t)
           (message "deleted project %s" project-path))))

(defun projects-cleanup ()
  "Delete all test projects."
  (interactive)
  (let* ((projects (f-directories project-dir))
         (matches  (-filter (lambda (project) (s-contains? project-prefix project)) projects)))
    (seq-do #'delete-project matches)))
#+end_src

* email
** variables
#+begin_src emacs-lisp
(if (not (equal "ben" (user-login-name)))
    (progn (setq
            mu-root (s-chop-suffixes '("/mu" "/bin") (file-truename  (executable-find "mu")))
            mu4e-path (concat mu-root "/share/emacs/site-lisp/mu4e"))
           (add-to-list 'load-path mu4e-path)))

(after! mu4e
  (setq mu4e-update-interval 180))
(setq +mu4e-workspace-name "*mail*")

(after! mu4e-modeline
  (setq mu4e-modeline-unread-items `("U:" . ,(+mu4e-normalised-icon "nf-fa-fire"))
        mu4e-modeline-all-clear `("C:" . ,(+mu4e-normalised-icon "nf-fa-check"))
        mu4e-modeline-all-read `("R:" . ,(+mu4e-normalised-icon "nf-fa-check"))
        mu4e-modeline-new-items `("N:" . ,(+mu4e-normalised-icon "nf-fa-fire"))))
#+end_src

** mu4e capture target
#+begin_src emacs-lisp
(setq +org-capture-emails-file "tasks.org")
#+end_src

** accounts
#+begin_src emacs-lisp
(set-email-account! "Gmail"
                    '((mu4e-sent-folder       . "/gmail/sent")
                      (mu4e-drafts-folder     . "/gmail/drafts")
                      (mu4e-trash-folder      . "/gmail/trash")
                      (mu4e-refile-folder     . "/gmail/All Mail")
                      (smtpmail-smtp-user     . "benny.ouattara@gmail.com")
                      (smtpmail-smtp-server   . "smtp.gmail.com")
                      (smtpmail-smtp-service  . 465)
                      (smtpmail-stream-type   . ssl)
                      (user-mail-address      . "benny.ouattara@gmail.com") ;; only needed for mu < 1.4
                      )
                    t)

(set-email-account! "Protonmail"
                    '((mu4e-sent-folder       . "/protonmail/sent")
                      (mu4e-drafts-folder     . "/protonmail/drafts")
                      (mu4e-trash-folder      . "/protonmail/trash")
                      (mu4e-refile-folder     . "/protonmail/All Mail")
                      (smtpmail-smtp-user     . "benny.ouattara@protonmail.com")
                      (smtpmail-smtp-server   . "127.0.0.1")
                      (smtpmail-smtp-service  . 1025)
                      (smtpmail-stream-type   . starttls)
                      (user-mail-address      . "benny.ouattara@protonmail.com")    ;; only needed for mu < 1.4
                      )
                    t)

(set-email-account! "Spotify"
                    '((mu4e-sent-folder       . "/spotify/sent")
                      (mu4e-drafts-folder     . "/spotify/drafts")
                      (mu4e-trash-folder      . "/spotify/trash")
                      (mu4e-refile-folder     . "/spotify/All Mail")
                      (smtpmail-smtp-user     . "zangao@spotify.com")
                      (smtpmail-smtp-server   . "smtp.gmail.com")
                      (smtpmail-smtp-service  . 465)
                      (smtpmail-stream-type   . ssl)
                      (user-mail-address      . "zangao@spotify.com")    ;; only needed for mu < 1.4
                      )
                    t)

;; this won't work temporarily for protonmail as certificates are being moved to /etc/ssl/certs
(after! gnutls
  (add-to-list 'gnutls-trustfiles "~/.config/certificates/protonmail.crt"))

;; (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
#+end_src

** email bookmarks
#+begin_src emacs-lisp
;; NOTE: mu-find cannot match strings containing hyphens e.g: fleet-manager-bot, use "fleet" to match
(setq mu4e-bookmarks
      '((:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key 117)
        (:name "Skip messages" :query "(flag:unread AND NOT flag:trashed) AND (subject:\"Use Spotify BOM\" OR subject:\"Use Spotify root\" OR subject:\"no review needed\" OR subject:\"Update dependent library\" OR from:\"fleet\" OR from:\"fleetshift\" OR from:\"setadel\")" :key 115)
        (:name "Today's messages" :query "date:today..now" :key 116)
        (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key 119)
        (:name "Messages with images" :query "mime:image/*" :key 112)
        (:name "Fragomen" :query "fragomen" :hide-unread t :key 102)))
#+end_src

** mail management
Quickly take actions such as read later or follow up on emails
This has been superseded by ~+mu4e/capture-msg-to-agenda~ which adds the =msg= as task in the global ~tasks.org~ which is registered with org agenda

** disable window management
#+begin_src emacs-lisp
(after! mu4e
  (set-popup-rule! (regexp-quote mu4e-main-buffer-name) :actions :ignore t)
  (set-popup-rule! (regexp-quote mu4e-headers-buffer-name) :actions :ignore t))
#+end_src

** disable auto fill
#+begin_src emacs-lisp
(after! mu4e-compose
  (add-hook! 'mu4e-compose-mode-hook (auto-fill-mode -1)))
#+end_src
* dired
** dired single
Ability to navigate in and out of directories with h and l using a single buffer when navigating down
#+begin_src emacs-lisp
(after! (dired dired-single)
  (define-key dired-mode-map [remap dired-find-file]
    'dired-single-buffer)
  (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
    'dired-single-buffer-mouse)
  (define-key dired-mode-map [remap dired-up-directory]
    'dired-single-up-directory)
  (map! :after dired-single
        :map dired-mode-map
        :n "h" 'dired-single-up-directory
        :n "l" 'dired-single-buffer))
#+end_src

* eshell
** variable
#+begin_src emacs-lisp
(setq eshell-history-size nil)
#+end_src

** json output formatter
formats all json output coming through eshell, avoid the need to use tools such
as jq since it already integrates json output right within eshell
#+begin_src emacs-lisp
(defun beno--valid-json? (maybe-json)
  "Validate MAYBE-JSON is json."
  (condition-case nil
      (progn
        (json-read-from-string maybe-json)
        t)
    (error nil)))

;; TODO: refactor these variables in a cons e.g (cons beg end)
(setq beno--eshell-output-beg nil)
(setq beno--eshell-output-end nil)

(defun beno--eshell-json-print ()
  (let* ((start (marker-position eshell-last-output-start))
         (end (marker-position eshell-last-output-end))
         (partial-output (buffer-substring start end)))
    (if (s-matches? eshell-prompt-regexp partial-output)
        (condition-case nil
            (progn
              (when (and beno--eshell-output-beg
                         beno--eshell-output-end
                         (beno--valid-json? (buffer-substring beno--eshell-output-beg
                                                              beno--eshell-output-end)))
                (json-pretty-print beno--eshell-output-beg beno--eshell-output-end))
              (setq beno--eshell-output-beg nil)
              (setq beno--eshell-output-end nil))
          (error (progn
                   (setq beno--eshell-output-beg nil)
                   (setq beno--eshell-output-end nil))))
      (progn
        (unless beno--eshell-output-beg
          (setq beno--eshell-output-beg (marker-position eshell-last-output-start)))
        (setq beno--eshell-output-end (marker-position eshell-last-output-end))))))

(after! eshell
  (add-to-list 'eshell-output-filter-functions
               #'beno--eshell-json-print))
#+end_src

** making eshell java friendly
#+begin_src emacs-lisp
(defun project-tests (project-path)
  "Extract java TESTS at PROJECT-PATH."
  (-filter (lambda (filename) (or (s-contains? "IT.java" filename)
                                  (s-contains? "Test.java" filename)))
           (-map (lambda (filepath) (-last-item  (s-split "/" filepath)))
                 (f-files project-path nil t))))

(defun test-to-run (test-name)
  "Prompt for TEST-NAME to run."
  (interactive
   (list  (ivy-read "Test to run: "
                    (project-tests default-directory))))
  (format "clear && mvn clean -Dtest=%s -DfailIfNoTests=false test" test-name))

(defun package-no-test ()
  "Command to package application without running tests"
  (format "clear && mvn -Dmaven.test.skip=true clean package"))

(defun package-verify ()
  "Command to verify application"
  (format "clear && mvn clean verify"))

(defun package-compile ()
  "Command to verify application"
  (format "clear && mvn clean compile"))

(defun eshell/pkg ()
  "Package java application."
  (insert (package-no-test)))

(defun eshell/compile ()
  "Compile java application."
  (insert (package-compile)))

(defun eshell/verify ()
  "Verify java application."
  (insert (package-verify)))

(defun eshell/gst (&rest args)
  "Quickly jumps to magit-status."
  (magit-status (pop args) nil)
  (eshell/echo))

(defun eshell/test ()
  "Run java tests."
  (eshell/cd-to-project)
  (+eshell/goto-end-of-prompt)
  (insert (call-interactively 'test-to-run)))
#+end_src

** eshell placement
#+begin_src emacs-lisp
(setf +main-eshell-popup+ "*doom:eshell-popup:main*")

(defun beno--eshell-toggle-right (arg &optional command)
  "Toggle eshell popup window to the right"
  (interactive "P")
  (let ((eshell-buffer
         (get-buffer-create +main-eshell-popup+))
        confirm-kill-processes
        current-prefix-arg)
    (when arg
      (when-let (win (get-buffer-window eshell-buffer))
        (delete-window win))
      (when (buffer-live-p eshell-buffer)
        (with-current-buffer eshell-buffer
          (fundamental-mode)
          (erase-buffer))))
    (if-let (win (get-buffer-window eshell-buffer))
        (let (confirm-kill-processes)
          (delete-window win)
          (ignore-errors (kill-buffer eshell-buffer)))
      (with-current-buffer eshell-buffer
        (doom-mark-buffer-as-real-h)
        (if (eq major-mode 'eshell-mode)
            (run-hooks 'eshell-mode-hook)
          (eshell-mode))
        (when command
          (+eshell-run-command command eshell-buffer)))
      (pop-to-buffer eshell-buffer))))

(defun beno--eshell-split-right ()
  "Create a new eshell window 2/3 to the right of the current one."
  (interactive)
  (let* ((ignore-window-parameters t)
         (dedicated-p (window-dedicated-p))
         (+eshell-enable-new-shell-on-split
          (or +eshell-enable-new-shell-on-split (frame-parameter nil 'saved-wconf))))
    (select-window (split-window-horizontally (* 2 (/ (window-total-width) 3))))
    (+eshell--bury-buffer dedicated-p)))
#+end_src

* emacs nano
disabled because it doesn't integrate well with doom emacs
#+begin_src emacs-lisp
;; (require 'load-nano)
#+end_src

* avy
** avy actions
#+begin_src emacs-lisp
(defun avy-action-kill-whole-line (pt)
  (save-excursion
    (goto-char pt)
    (kill-whole-line))
  (select-window
   (cdr
    (ring-ref avy-ring 0)))
  t)

(defun avy-action-teleport-whole-line (pt)
  (avy-action-kill-whole-line pt)
  (save-excursion (yank)) t)

(defun avy-action-mark-to-char (pt)
  (activate-mark)
  (goto-char pt))

(defun avy-action-helpful (pt)
  (save-excursion
    (goto-char pt)
    (helpful-at-point))
  (select-window
   (cdr (ring-ref avy-ring 0)))
  t)

(defun avy-action-embark (pt)
  (unwind-protect
      (save-excursion
        (goto-char pt)
        (embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)

(after! avy
  (setf (alist-get ?D avy-dispatch-alist) 'avy-action-kill-whole-line
        (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line
        (alist-get ?Z  avy-dispatch-alist) 'avy-action-mark-to-char
        (alist-get ?H avy-dispatch-alist) 'avy-action-helpful
        (alist-get ?\; avy-dispatch-alist) 'avy-action-embark))
#+end_src

* cp
compete for the sake of it
#+begin_src emacs-lisp
(when (> (display-pixel-width) 3000)
  (set-popup-rule! "*cp:eshell*" :size 0.40 :height 0.25 :slot 90 :select t :quit nil :ttl t :side 'right)
  (set-popup-rule! "err.txt" :size 0.40 :height 0.25 :slot 100 :select t :quit nil :ttl t :side 'right :modeline t)
  (set-popup-rule! "output.txt" :size 0.40 :height 0.25 :slot 110 :select t :quit nil :ttl t :side 'right :modeline t)
  (set-popup-rule! "input.txt" :size 0.40 :height 0.25 :slot 120 :select t :quit nil :ttl t :side 'right :modeline t))

(cl-defstruct solution-info
  (ext nil :read-only t)
  (dir nil :read-only t)
  (template nil :read-only t))

(defun initialize-lang-info ()
  (let* ((lang-info (make-hash-table))
         (python-ext "py")
         (python-dir (concat project-dir "/algo-python"))
         (python-template "import sys
sys.stdin = open(\"input.txt\", \"r\")
sys.stdout = open(\"output.txt\", \"w\")
sys.stderr = open(\"err.txt\", \"w\")")
         (ruby-ext "rb")
         (ruby-dir (concat project-dir "/algo-ruby"))
         (ruby-template "$stdin = File.open(\"input.txt\", \"r\")
$stdout = File.open(\"output.txt\", \"w\")
$stderr = File.open(\"err.txt\", \"w\")")
         (scala-ext "scala")
         (scala-dir (concat project-dir "/algo-scala"))
         (scala-template "")
         (python-info (make-solution-info :ext python-ext :dir python-dir :template python-template))
         (ruby-info (make-solution-info :ext ruby-ext :dir ruby-dir :template ruby-template))
         (scala-info (make-solution-info :ext scala-ext :dir scala-dir :template scala-template)))
    (puthash :py python-info lang-info)
    (puthash :scala scala-info lang-info)
    (puthash :rb ruby-info lang-info)
    lang-info))

(defun cp-solve (language problem-name)
  (interactive "slang: \nsproblem name: \n")
  (let* ((info-table (initialize-lang-info))
         (lang (doom-keyword-intern language))
         (lang-info (gethash lang info-table))
         (solution-directory (solution-info-dir lang-info))
         (ext (solution-info-ext lang-info))
         (lang-template (solution-info-template lang-info))
         (solution-directory-path (concat solution-directory "/" problem-name))
         (solution-file-path (concat solution-directory-path "/" "sol." ext))
         (input-file-path (concat solution-directory-path "/" "input.txt"))
         (output-file-path (concat solution-directory-path "/" "output.txt"))
         (error-file-path (concat solution-directory-path "/" "err.txt"))
         (file-paths (list input-file-path output-file-path error-file-path solution-file-path))
         (height (/ (window-total-height) 4)))
    (make-directory solution-directory-path 'parents)
    (-map #'f-touch file-paths)
    (with-current-buffer (find-file solution-file-path)
      (when (= (buffer-size) 0) (insert lang-template))
      (save-buffer))
    (let ((eshell-buffer-name "*cp:eshell*"))
      (eshell))
    (display-buffer (find-file-noselect error-file-path))
    (display-buffer (find-file-noselect output-file-path))
    (display-buffer (find-file-noselect input-file-path))))
#+end_src

* auto save buffers
Automatically save buffers on focus change
#+begin_src emacs-lisp
(defun save-all-buffers ()
  (save-some-buffers t))

(add-to-list 'doom-switch-buffer-hook #'save-all-buffers)
(add-to-list 'doom-switch-window-hook #'save-all-buffers)
(add-to-list 'doom-switch-frame-hook #'save-all-buffers)
#+end_src

* wgrep
** sensible faces
some doom themes don't deal well with wgrep faces, this is a sensible default
#+begin_src emacs-lisp
(custom-set-faces!
  '(wgrep-face :background "#aceaac" :foreground "#004c00"))
#+end_src

* authsource
#+begin_src emacs-lisp
(setq
 secrets-dir (concat sync-dir "secrets/")
 zangao-secrets (concat secrets-dir "zangao/authinfo.gpg")
 bouattara-secrets (concat secrets-dir "bouattara/authinfo.gpg")
 benny-secrets (concat secrets-dir "benny/authinfo.gpg"))

(pcase (user-login-name)
  ("zangao" (pushnew! auth-sources zangao-secrets))
  ("bouattara" (pushnew! auth-sources bouattara-secrets))
  ("benouattara" (pushnew! auth-sources benny-secrets)))
#+end_src

* SQL
#+begin_src emacs-lisp
(defun beno--read-db-password (db)
  (if-let ((result (auth-source-search :database db)))
      (funcall (plist-get  (car result) :secret))))

(defun beno--sql-authenticator (wallet product user server database port)
  (beno--read-db-password database))

(setq local-wallet (pcase (user-login-name)
                     ("zangao" zangao-secrets)
                     ("bouattara" bouattara-secrets)
                     ("benouattara" benny-secrets)))

(after! sql
  (setq
   setcheckerpwd (beno--read-db-password "setchecker_runs")
   localpwd (beno--read-db-password "localdb")
   jazapwd (beno--read-db-password "jazadb")
   sql-password-search-wallet-function #'beno--sql-authenticator
   sql-password-wallet local-wallet
   sql-connection-alist `(("setchecker-cloudsql-connection"
                           (sql-product 'postgres)
                           (sql-user "postgres")
                           ;; password reading is done through pgpass since psql cli does't support password passing
                           ;; this line just makes sure that sql.el doesn't ask us for a dummy password
                           (sql-password ,setcheckerpwd)
                           (sql-database "setchecker_runs")
                           (sql-server "localhost")
                           (sql-port 5432))
                          ("local-postgres-connection"
                           (sql-product 'postgres)
                           (sql-user "localdb")
                           (sql-password ,localpwd)
                           (sql-database "localdb")
                           (sql-server "localhost")
                           (sql-port 5432))
                          ("jaza-postgres-connection"
                           (sql-product 'postgres)
                           (sql-user "jazadb")
                           (sql-password ,jazapwd)
                           (sql-database "jazadb")
                           (sql-server "localhost")
                           (sql-port 5432)))
   sql-postgres-login-params '(user password database server)))
#+end_src

* compilation
Use ~comint~ and ~compile~ to ease project compilation
** compilation variables
#+begin_src emacs-lisp
(after! compile
  (compilation-set-skip-threshold 2)) ;; skip warning an info
#+end_src

** compilation with mvn
#+begin_src emacs-lisp :results silent
(defun beno--mvn-root-dir ()
  (or (locate-dominating-file buffer-file-name ".git")
      (projectile-project-root)))

(defun beno--run-mvn-command (command)
  (interactive "sCommand: ")
  (let ((default-directory (beno--mvn-root-dir))
        (compilation-read-command nil)
        (compile-command (format "sh mvn %s" command)))
    (call-interactively #'compile)))

(defun beno--mvn-project-tests (project-path)
  "Extract java TESTS at PROJECT-PATH."
  (-filter (lambda (filename) (or (s-contains? "IT.java" filename)
                                  (s-contains? "Test.java" filename)))
           (-map (lambda (filepath) (-last-item  (s-split "/" filepath)))
                 (f-files project-path nil t))))

(defun beno--mvn-test-to-run (test-name)
  "Prompt for TEST-NAME to run."
  (interactive
   (list  (ivy-read "Test to run: "
                    (beno--mvn-project-tests (beno--mvn-root-dir)))))
  (if (s-contains? "Test.java" test-name) ;; surefire unit test
      (format "clean -DfailIfNoTests=false -Dtest=%s test" test-name)
    ;; failsafe integration test
    (format "clean -DfailIfNoTests=false -Dit.test=%s verify" test-name)))
#+end_src

* projectile
** variable
#+begin_src emacs-lisp
(setq
 projectile-project-search-path '(("~/Code/" . 1) ("~/common-lisp" . 1) ("~/Code/archives/Code" . 1)))
#+end_src

** java .project conflict
doom uses ~.project~ to mark projects so it adds it as a projectile marker. However the java language server also generates ~.project~ file for each imported module. In a multi-module java setting, projectile ends up considering each sub-module as project instead of the root project. Remove ~.project~ as a project marker since I don't use doom projects anyway
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-project-root-files-bottom-up
        (remove ".project" projectile-project-root-files-bottom-up)))
#+end_src

** java projectile commands
commands run at the project level
#+begin_src emacs-lisp
(after! lsp-java
  (setq  projectile-project-test-cmd "sh mvn clean test"
         projectile-project-compilation-cmd "sh mvn clean compile"
         projectile-project-install-cmd "sh mvn clean install"
         projectile-project-package-cmd "sh mvn clean verify"
         projectile-project-run-cmd "docker run --rm --dns 1.1.1.1 -p 8080:8080 -p 5990:5990 -p 5700:5700 -e SPOTIFY_DOMAIN=gew1.spotify.net -e SPOTIFY_POD=gew1 $(jq -r '.image' target/jib-image.json)")
  (map! :leader
        :desc "Verify project"
        :n "p P"
        'projectile-package-project))
#+end_src

* window placement
#+begin_src emacs-lisp
(after! frame
  (if (> (display-pixel-width) 1600)
      ;; large display
      (progn
        (set-popup-rule! +main-eshell-popup+ :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "*SQL:" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
        (set-popup-rule! "*mu4e-draft*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
        (set-popup-rule! "^\\*Soccer.*" :size 0.33 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
        (set-popup-rule! "^\\*com.spotify.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
        (set-popup-rule! "^\\*compilation.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*Async Shell Command.*" :size 0.40 :vslot -4 :select t :quit t :ttl t :side 'right)
        (set-popup-rule! "^\\*Shell Command.*" :size 0.40 :vslot -4 :select t :quit t :ttl t :side 'right)
        (set-popup-rule! "^\\*helpful.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*eww*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*Org Agenda\\*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*Org Sr.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "[0-9]+-[0-9]+-[0-9]+.org" :size 0.40 :vslot -4 :select t :quit 'other :ttl 5 :side 'right :autosave t)
        (set-popup-rule! "journal.org" :size 0.40 :vslot -4 :select t :quit 'other :ttl 5 :side 'right :autosave t)
        (set-popup-rule! "^[0-9]\\{8\\}$" :size 0.40 :vslot -4 :select t :quit 'other :ttl nil :side 'right :autosave t)
        (set-popup-rule! "*kubel" :size 0.50 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*sbt*" :size 0.40 :vslot -4 :select t :quit nil :ttl nil :side 'right)
        (set-popup-rule! "^\\*cider.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*docker.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*cider-repl.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*HTTP Response.*" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
        (set-popup-rule! "^\\*ChatGPT*" :size 0.40 :vslot -4 :select t :quit nil :ttl nil :side 'right)
        (set-popup-rule! "^\\*Async Shell.*" :size 0.40 :vslot -4 :select t :quit t :ttl t :side 'right)
        (set-popup-rule! "^\\*Proced*" :size 0.40 :vslot -4 :select t :quit t :ttl t :side 'right))
    ;; small display
    (progn
      (set-popup-rule! +main-eshell-popup+ :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "*SQL:" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "*mu4e-draft*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*Soccer.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*Org Sr.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*compilation.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*Shell Command.*" :size 0.35 :vslot -4 :select t :quit t :ttl t :side 'bottom)
      (set-popup-rule! "^\\*Async Shell Command.*" :size 0.35 :vslot -4 :select t :quit t :ttl t :side 'bottom)
      (set-popup-rule! "^\\*helpful.*" :size 0.35 :vslot -4 :select nil :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*eww*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      ;; (set-popup-rule! "^\\*Org Agenda\\*" :size 0.25 :vslot -4 :select t :quit nil :ttl t :side 'right)
      ;; (set-popup-rule! "[0-9]+-[0-9]+-[0-9]+.org" :size 0.25 :vslot -4 :select t :quit 'other :ttl 5 :side 'right :autosave t)
      ;; (set-popup-rule! "journal.org" :size 0.25 :vslot -4 :select t :quit 'other :ttl 5 :side 'right :autosave t)
      ;; (set-popup-rule! "^[0-9]\\{8\\}$" :size 0.25 :vslot -4 :select t :quit 'other :ttl 5 :side 'right :autosave t)
      (set-popup-rule! "*kubel" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*sbt*" :size 0.35 :vslot -4 :select t :quit nil :ttl nil :side 'bottom)
      (set-popup-rule! "^\\*cider.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*docker.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*cider-repl.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*HTTP Response.*" :size 0.35 :vslot -4 :select t :quit nil :ttl t :side 'bottom)
      (set-popup-rule! "^\\*ChatGPT*" :size 0.35 :vslot -4 :select t :quit nil :ttl nil :side 'bottom))))
#+end_src

* vertico-posframe
disabled because it significantly decreases display performance
#+begin_src emacs-lisp
;; (vertico-posframe-mode 1)
;; (setq vertico-posframe-parameters
;;       '((left-fringe . 8)
;;         (right-fringe . 8)))
#+end_src

* hide title bar
Emacs 29 allows you to hide the title bar, no need to compile emacs with title bar removed
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src

* elfeed
#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@2-weeks-ago +unread"))
(add-hook 'elfeed-search-mode-hook #'elfeed-update)
#+end_src

* guile

#+begin_src emacs-lisp
(with-eval-after-load 'geiser-guile
  (add-to-list 'geiser-guile-load-path "/home/ben/Code/guix-turtle")
  (add-to-list 'geiser-guile-load-path "/home/ben/Code/todo/guix")
  ;; (add-to-list 'geiser-guile-load-path "/home/ben/Code/octo-guix")
  )
#+end_src

* info

#+begin_src emacs-lisp
(use-package! info-colors
  :after info
  :commands (info-colors-fontify-node)
  :hook (Info-selection . info-colors-fontify-node))

(after! info
  (set-popup-rule! "^\\*info\\*" :ignore t))
#+end_src

* notmuch

#+begin_src emacs-lisp
(after! notmuch
  (setq +notmuch-sync-backend 'mbsync)
  ;; (after! notmuch
  ;;   (setq notmuch-show-log nil
  ;;         notmuch-hello-sections `(notmuch-hello-insert-saved-searches
  ;;                                  notmuch-hello-insert-alltags)
  ;;         ;; To hide headers while composing an email
  ;;         notmuch-message-headers-visible nil))
  (setq notmuch-saved-searches '((:name "inbox" :query "tag:inbox not tag:trash" :key "i")
                                 ;; (:name "flagged" :query "tag:flagged" :key "f")
                                 ;; (:name "sent" :query "tag:sent" :key "s")
                                 ;; (:name "drafts" :query "tag:draft" :key "d")
                                 (:name "spotify" :query "tag:spotify" :key "s")
                                 (:name "gmail" :query "tag:gmail" :key "g")
                                 (:name "protonmail" :query "tag:protonmail" :key "p")
                                 (:name "spotify-unread" :query "tag:spotify and tag:unread" :key "S")
                                 (:name "gmail-unread" :query "tag:gmail and tag:unread" :key "G")
                                 (:name "protonmail-unread" :query "tag:protonmail and tag:unread" :key "P")))

  (set-popup-rule! "^\\*notmuch-hello" :ignore t)
  (set-popup-rule! "^\\*notmuch-saved" :ignore t)

  (map! :localleader
        :map (notmuch-hello-mode-map notmuch-search-mode-map notmuch-tree-mode-map notmuch-show-mode-map)
        :desc "Compose email"   "c" #'+notmuch/compose
        :desc "Sync email"      "u" #'+notmuch/update
        :desc "Quit notmuch"    "q" #'+notmuch/quit
        :desc "Mark as read"    "r" #'notmuch-show-mark-read
        :map notmuch-search-mode-map
        :desc "Mark as deleted" "d" #'+notmuch/search-delete
        :desc "Mark as spam"    "s" #'+notmuch/search-spam
        :map notmuch-tree-mode-map
        :desc "Mark as deleted" "d" #'+notmuch/tree-delete
        :desc "Mark as spam"    "s" #'+notmuch/tree-spam))
#+end_src

* benouattara user init.el

#+begin_src emacs-lisp :tangle (if (equal (user-login-name) "benouattara") "init.el" "no")
;;; init.el -*- lexical-binding: t; -*-

;; Copy this file to ~/.doom.d/init.el or ~/.config/doom/init.el ('doom install'
;; will do this for you). The `doom!' block below controls what modules are
;; enabled and in what order they will be loaded. Remember to run 'doom refresh'
;; after modifying it.
;;
;; More information about these modules (and what flags they support) can be
;; found in modules/README.org.

(doom! :input
           ;;chinese
           ;;japanese
           ;;layout            ; auie,ctsrnm is the superior home row

           :completion
           (company
            +childframe)                ; the ultimate code completion backend
           ;;helm              ; the *other* search engine for love and life
           ;;ido               ; the other *other* search engine...
           ;; ivy                              ; a search engine for love and life
           vertico

           :ui
           ;;deft              ; notational velocity for Emacs
           doom                         ; what makes DOOM look the way it does
           doom-dashboard               ; a nifty splash screen for Emacs
           ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
           ;;fill-column       ; a `fill-column' indicator
           hl-todo            ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
           (hydra +hydra/window-nav/body
                  +hydra/text-zoom/body)
           (emoji +unicode)  ; 🙂
           ;;indent-guides     ; highlighted indent columns
           ;;  (modeline +light)          ; snazzy, Atom-inspired modeline, plus API
           nav-flash                  ; blink the current line after jumping
           ;;neotree           ; a project drawer, like NERDTree for vim
           ophints                ; highlight the region an operation acts on
           (popup                 ; tame sudden yet inevitable temporary windows
            +all                  ; catch all popups that start with an asterix
            +defaults)            ; default popup rules
           ;;pretty-code       ; replace bits of code with pretty symbols
           ;;ligatures         ; ligatures and symbols to make your code pretty again
           ;;tabs              ; an tab bar for Emacs
           treemacs                  ; a project drawer, like neotree but cooler
           ;;unicode           ; extended unicode support for various languages
           vc-gutter          ; vcs diff in the fringe
           vi-tilde-fringe    ; fringe tildes to mark beyond EOB
           window-select      ; visually switch windows
           workspaces         ; tab emulation, persistence & separate workspaces
           ;;zen               ; distraction-free coding or writing

           :editor
           (evil +everywhere)           ; come to the dark side, we have cookies
           file-templates               ; auto-snippets for empty files
           ;; fold                           ; (nigh) universal code folding
           ;;(format +onsave)  ; automated prettiness
           ;;god               ; run Emacs commands without modifier keys
           lispy                   ; vim for lisp, for people who don't like vim
           multiple-cursors        ; editing in many places at once
           ;;objed             ; text object editing for the innocent
           ;;parinfer          ; turn lisp into python, sort of
           rotate-text           ; cycle region at point between text candidates
           snippets              ; my elves. They type so I don't have to
           word-wrap             ; soft wrapping with language-aware indent

           :emacs
           dired         ; making dired pretty [functional]
           electric      ; smarter, keyword-based electric-indent
           ibuffer       ; interactive buffer management
           undo          ; persistent, smarter undo for your inevitable mistakes
           vc            ; version-control and Emacs, sitting in a tree

           :term
           eshell               ; a consistent, cross-platform shell (WIP)
           ;; shell             ; a terminal REPL for Emacs
           ;;term              ; terminals in Emacs
           vterm                        ; another terminals in Emacs

           :checkers
           syntax              ; tasing you for every semicolon you forget
           ;; ;;(spell +flyspell) ; tasing you for misspelling mispelling
           ;; ;;grammar           ; tasing grammar mistake every you make

           :tools
           ;;ansible
           ;;biblio            ; Writes a PhD for you (citation needed)
           (debugger +lsp)   ; FIXME stepping through code, to help you add bugs
           direnv
           ;; (hammer +spotify +container)
           docker
           ;;editorconfig      ; let someone else argue about tabs vs spaces
           ;;ein               ; tame Jupyter notebooks with emacs
           (eval +overlay)   ; run code, run (also, repls)
           ;;gist              ; interacting with github gists
           (lookup              ; helps you navigate your code and documentation
            +docsets)           ; ...or in Dash docsets locally
           (lsp +eglot)
           ;;macos             ; MacOS-specific commands
           magit                        ; a git porcelain for Emacs
           make                         ; run make tasks from Emacs
           (pass
            +auth)                      ; password manager for nerds
           pdf                          ; pdf enhancements
           ;;prodigy           ; FIXME managing external services & code builders
           ;;rgb               ; creating color strings
           ;;terraform         ; infrastructure as code
           tmux                       ; an API for interacting with tmux
           tree-sitter                ; syntax and parsing, sitting in a tree...
           ;;upload            ; map local to remote projects via ssh/ftp
           ;;wakatime

           :os
           ;; (:if IS-MAC macos)  ; improve compatibility with macOS
           ;;tty               ; improve the terminal Emacs experience

           :lang
           ;;agda              ; types of types of types of types...
           ;;assembly          ; assembly for fun or debugging
           ;;beancount         ; mind the GAAP
           (cc +lsp)     ; C/C++/Obj-C madness
           clojure       ; java with a lisp
           common-lisp   ; if you've seen one lisp, you've seen them all
           ;;coq               ; proofs-as-programs
           ;;crystal           ; ruby at the speed of c
           ;;csharp            ; unity, .NET, and mono shenanigans
           data                 ; config/data formats
           ;;(dart +flutter)   ; paint ui and not much else
           ;;dhall
           ;;elixir            ; erlang done right
           ;;elm               ; care for a cup of TEA?
           emacs-lisp                   ; drown in parentheses
           ;;erlang            ; an elegant language for a more civilized age
           ;;ess               ; emacs speaks statistics
           ;;factor
           ;;faust             ; dsp, but you get to keep your soul
           ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
           ;;fsharp           ; ML stands for Microsoft's Language
           ;;fstar             ; (dependent) types and (monadic) effects and Z3
           ;;gdscript          ; the language you waited for
           ;;(go +lsp)         ; the hipster dialect
           ;;(graphql +lsp)    ; Give queries a REST
           ;;(haskell +lsp)    ; a language that's lazier than I am
           ;;hy                ; readability of scheme w/ speed of python
           ;;idris             ;
           json                         ; At least it ain't XML
           (java +lsp
                 +tree-sitter)     ; the poster child for carpal tunnel syndrome
           ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
           ;;julia             ; a better, faster MATLAB
           ;;kotlin            ; a better, slicker Java(Script)
           ;;latex             ; writing papers in Emacs has never been so fun
           ;;lean
           ;;ledger            ; an accounting system in Emacs
           ;;lua               ; one-based indices? one-based indices
           markdown      ; writing docs for people to ignore
           ;;nim               ; python + lisp at the speed of c
           nix           ; I hereby declare "nix geht mehr!"
           ;;ocaml             ; an objective camel
           (org          ; organize your plain life in plain text
            +roam2       ; TODO: upgrade to +roam2
            +dragndrop   ; drag & drop files/images into org buffers
            ;;+hugo            ; use Emacs for hugo blogging
            +ipython     ; ipython/jupyter support for babel
            +pandoc      ; export-with-pandoc support
            ;; +pomodoro    ; be fruitful with the tomato technique
            +noter
            +present
            +pretty
            +journal)                   ; using org-mode for presentations
           ;;perl              ; write code no one else can comprehend
           ;;php               ; perl's insecure younger brother
           ;;plantuml          ; diagrams for confusing people more
           ;;purescript        ; javascript, but functional
           python              ; beautiful is better than ugly
           ;;qt                ; the 'cutest' gui framework ever
           ;;racket            ; a DSL for DSLs
           ;;raku              ; the artist formerly known as perl6
           rest                         ; Emacs as a REST client
           ;;rst               ; ReST in peace
           (ruby +rbenv
                 +rails
                 +tree-sitter) ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
           ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
           (scala +lsp
                  +tree-sitter)      ; java, but good
           (scheme +guile)           ; a fully conniving family of lisps
           sh                        ; she sells {ba,z,fi}sh shells on the C xor
           ;;sml
           ;;solidity          ; do you need a blockchain? No.
           ;;swift             ; who asked for emoji variables?
           ;;terra             ; Earth and Moon in alignment for performance.
           ;;web               ; the tubes
           yaml                         ; JSON, but readable
           ;;zig               ; C, but simpler

           :email
           (mu4e +gmail)
           ;; (notmuch +afew +org)
           ;;(wanderlust +gmail)

           ;; Applications are complex and opinionated modules that transform Emacs
           ;; toward a specific purpose. They may have additional dependencies and
           ;; should be loaded late.
           :app
           calendar
           ;;emms
           ;;everywhere        ; *leave* Emacs!? You must be joking
           ;; irc               ; how neckbeards socialize
           (rss +org)                   ; emacs as an RSS reader
           ;;twitter           ; twitter client https://twitter.com/vnought

           :config
           literate
           (default +bindings +smartparens))
#+end_src

* guix init.el

#+begin_src emacs-lisp :tangle (if (equal (system-name) "ben") "init.el" "no")
;;; init.el -*- lexical-binding: t; -*-

;; Copy this file to ~/.doom.d/init.el or ~/.config/doom/init.el ('doom install'
;; will do this for you). The `doom!' block below controls what modules are
;; enabled and in what order they will be loaded. Remember to run 'doom refresh'
;; after modifying it.
;;
;; More information about these modules (and what flags they support) can be
;; found in modules/README.org.

(doom! :input
           ;;chinese
           ;;japanese
           ;;layout            ; auie,ctsrnm is the superior home row

           :completion
           (company
            +childframe)                ; the ultimate code completion backend
           ;;helm              ; the *other* search engine for love and life
           ;;ido               ; the other *other* search engine...
           ;; ivy                              ; a search engine for love and life
           vertico

           :ui
           ;;deft              ; notational velocity for Emacs
           doom                         ; what makes DOOM look the way it does
           doom-dashboard               ; a nifty splash screen for Emacs
           ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
           ;;fill-column       ; a `fill-column' indicator
           hl-todo            ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
           (hydra +hydra/window-nav/body
                  +hydra/text-zoom/body)
           (emoji +unicode)  ; 🙂
           ;;indent-guides     ; highlighted indent columns
           ;; (modeline +light)          ; snazzy, Atom-inspired modeline, plus API
           nav-flash                  ; blink the current line after jumping
           ;;neotree           ; a project drawer, like NERDTree for vim
           ophints                ; highlight the region an operation acts on
           (popup                 ; tame sudden yet inevitable temporary windows
            +all                  ; catch all popups that start with an asterix
            +defaults)            ; default popup rules
           ;;pretty-code       ; replace bits of code with pretty symbols
           ;;ligatures         ; ligatures and symbols to make your code pretty again
           ;;tabs              ; an tab bar for Emacs
           treemacs                  ; a project drawer, like neotree but cooler
           ;;unicode           ; extended unicode support for various languages
           vc-gutter          ; vcs diff in the fringe
           vi-tilde-fringe    ; fringe tildes to mark beyond EOB
           window-select      ; visually switch windows
           workspaces         ; tab emulation, persistence & separate workspaces
           ;;zen               ; distraction-free coding or writing

           :editor
           (evil +everywhere)           ; come to the dark side, we have cookies
           file-templates               ; auto-snippets for empty files
           ;; fold                           ; (nigh) universal code folding
           ;;(format +onsave)  ; automated prettiness
           ;;god               ; run Emacs commands without modifier keys
           lispy                   ; vim for lisp, for people who don't like vim
           multiple-cursors        ; editing in many places at once
           ;;objed             ; text object editing for the innocent
           ;;parinfer          ; turn lisp into python, sort of
           rotate-text           ; cycle region at point between text candidates
           snippets              ; my elves. They type so I don't have to
           word-wrap             ; soft wrapping with language-aware indent

           :emacs
           dired         ; making dired pretty [functional]
           electric      ; smarter, keyword-based electric-indent
           ibuffer       ; interactive buffer management
           undo          ; persistent, smarter undo for your inevitable mistakes
           vc            ; version-control and Emacs, sitting in a tree

           :term
           eshell               ; a consistent, cross-platform shell (WIP)
           ;; shell             ; a terminal REPL for Emacs
           ;;term              ; terminals in Emacs
           vterm                        ; another terminals in Emacs

           :checkers
           ;; syntax              ; tasing you for every semicolon you forget
           ;; ;;(spell +flyspell) ; tasing you for misspelling mispelling
           ;; ;;grammar           ; tasing grammar mistake every you make

           :tools
           ;;ansible
           ;;biblio            ; Writes a PhD for you (citation needed)
           (debugger +lsp)   ; FIXME stepping through code, to help you add bugs
           direnv
           ;; (hammer +spotify +container)
           docker
           ;;editorconfig      ; let someone else argue about tabs vs spaces
           ;;ein               ; tame Jupyter notebooks with emacs
           (eval +overlay)   ; run code, run (also, repls)
           ;;gist              ; interacting with github gists
           (lookup              ; helps you navigate your code and documentation
            +docsets)           ; ...or in Dash docsets locally
           (lsp +lsp)
           ;;macos             ; MacOS-specific commands
           magit                        ; a git porcelain for Emacs
           make                         ; run make tasks from Emacs
           (pass
            +auth)                      ; password manager for nerds
           pdf                          ; pdf enhancements
           ;;prodigy           ; FIXME managing external services & code builders
           ;;rgb               ; creating color strings
           ;;terraform         ; infrastructure as code
           tmux                       ; an API for interacting with tmux
           tree-sitter                ; syntax and parsing, sitting in a tree...
           ;;upload            ; map local to remote projects via ssh/ftp
           ;;wakatime

           :os
           ;; (:if IS-MAC macos)  ; improve compatibility with macOS
           ;;tty               ; improve the terminal Emacs experience

           :lang
           ;;agda              ; types of types of types of types...
           ;;assembly          ; assembly for fun or debugging
           ;;beancount         ; mind the GAAP
           (cc +lsp)     ; C/C++/Obj-C madness
           clojure       ; java with a lisp
           common-lisp   ; if you've seen one lisp, you've seen them all
           ;;coq               ; proofs-as-programs
           ;;crystal           ; ruby at the speed of c
           ;;csharp            ; unity, .NET, and mono shenanigans
           data                 ; config/data formats
           ;;(dart +flutter)   ; paint ui and not much else
           ;;dhall
           ;;elixir            ; erlang done right
           ;;elm               ; care for a cup of TEA?
           emacs-lisp                   ; drown in parentheses
           ;;erlang            ; an elegant language for a more civilized age
           ;;ess               ; emacs speaks statistics
           ;;factor
           ;;faust             ; dsp, but you get to keep your soul
           ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
           ;;fsharp           ; ML stands for Microsoft's Language
           ;;fstar             ; (dependent) types and (monadic) effects and Z3
           ;;gdscript          ; the language you waited for
           ;;(go +lsp)         ; the hipster dialect
           ;;(graphql +lsp)    ; Give queries a REST
           ;;(haskell +lsp)    ; a language that's lazier than I am
           ;;hy                ; readability of scheme w/ speed of python
           ;;idris             ;
           json                         ; At least it ain't XML
           (java +lsp
                 +tree-sitter)     ; the poster child for carpal tunnel syndrome
           ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
           ;;julia             ; a better, faster MATLAB
           ;;kotlin            ; a better, slicker Java(Script)
           ;;latex             ; writing papers in Emacs has never been so fun
           ;;lean
           ;;ledger            ; an accounting system in Emacs
           ;;lua               ; one-based indices? one-based indices
           markdown      ; writing docs for people to ignore
           ;;nim               ; python + lisp at the speed of c
           nix           ; I hereby declare "nix geht mehr!"
           ;;ocaml             ; an objective camel
           (org          ; organize your plain life in plain text
            +roam2       ; TODO: upgrade to +roam2
            +dragndrop   ; drag & drop files/images into org buffers
            ;;+hugo            ; use Emacs for hugo blogging
            +ipython     ; ipython/jupyter support for babel
            +pandoc      ; export-with-pandoc support
            ;; +pomodoro    ; be fruitful with the tomato technique
            +noter
            +present
            ;; +pretty
            +journal)                   ; using org-mode for presentations
           ;;perl              ; write code no one else can comprehend
           ;;php               ; perl's insecure younger brother
           ;;plantuml          ; diagrams for confusing people more
           ;;purescript        ; javascript, but functional
           python              ; beautiful is better than ugly
           ;;qt                ; the 'cutest' gui framework ever
           ;;racket            ; a DSL for DSLs
           ;;raku              ; the artist formerly known as perl6
           rest                         ; Emacs as a REST client
           ;;rst               ; ReST in peace
           (ruby +rbenv
                 +rails
                 +tree-sitter) ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
           ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
           (scala +lsp
                  +tree-sitter)      ; java, but good
           (scheme +guile)           ; a fully conniving family of lisps
           sh                        ; she sells {ba,z,fi}sh shells on the C xor
           ;;sml
           ;;solidity          ; do you need a blockchain? No.
           ;;swift             ; who asked for emoji variables?
           ;;terra             ; Earth and Moon in alignment for performance.
           ;;web               ; the tubes
           yaml                         ; JSON, but readable
           ;;zig               ; C, but simpler

           :email
           (mu4e +org +gmail)
           ;; (notmuch +afew +org)
           ;;(wanderlust +gmail)

           ;; Applications are complex and opinionated modules that transform Emacs
           ;; toward a specific purpose. They may have additional dependencies and
           ;; should be loaded late.
           :app
           calendar
           ;;emms
           ;;everywhere        ; *leave* Emacs!? You must be joking
           ;;irc               ; how neckbeards socialize
           (rss +org)                   ; emacs as an RSS reader
           ;;twitter           ; twitter client https://twitter.com/vnought

           :config
           literate
           (default +bindings +smartparens))
#+end_src

* zangao macos init.el
#+begin_src emacs-lisp :tangle (if (equal (user-login-name) "zangao") "init.el" "no")
;;; init.el -*- lexical-binding: t; -*-

;; Copy this file to ~/.doom.d/init.el or ~/.config/doom/init.el ('doom install'
;; will do this for you). The `doom!' block below controls what modules are
;; enabled and in what order they will be loaded. Remember to run 'doom refresh'
;; after modifying it.
;;
;; More information about these modules (and what flags they support) can be
;; found in modules/README.org.

(doom! :input
           ;;chinese
           ;;japanese
           ;;layout            ; auie,ctsrnm is the superior home row

           :completion
           (company
            +childframe)                ; the ultimate code completion backend
           ;;helm              ; the *other* search engine for love and life
           ;;ido               ; the other *other* search engine...
           ;; ivy                              ; a search engine for love and life
           vertico

           :ui
           ;;deft              ; notational velocity for Emacs
           doom                         ; what makes DOOM look the way it does
           doom-dashboard               ; a nifty splash screen for Emacs
           ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
           ;;fill-column       ; a `fill-column' indicator
           hl-todo            ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
           (hydra +hydra/window-nav/body
                  +hydra/text-zoom/body)
           (emoji +unicode)  ; 🙂
           ;;indent-guides     ; highlighted indent columns
           ;; (modeline +light)          ; snazzy, Atom-inspired modeline, plus API
           nav-flash                  ; blink the current line after jumping
           ;;neotree           ; a project drawer, like NERDTree for vim
           ophints                ; highlight the region an operation acts on
           (popup                 ; tame sudden yet inevitable temporary windows
            +all                  ; catch all popups that start with an asterix
            +defaults)            ; default popup rules
           ;;pretty-code       ; replace bits of code with pretty symbols
           ;;ligatures         ; ligatures and symbols to make your code pretty again
           ;;tabs              ; an tab bar for Emacs
           treemacs                  ; a project drawer, like neotree but cooler
           ;;unicode           ; extended unicode support for various languages
           vc-gutter          ; vcs diff in the fringe
           vi-tilde-fringe    ; fringe tildes to mark beyond EOB
           window-select      ; visually switch windows
           workspaces         ; tab emulation, persistence & separate workspaces
           ;;zen               ; distraction-free coding or writing

           :editor
           (evil +everywhere)           ; come to the dark side, we have cookies
           file-templates               ; auto-snippets for empty files
           ;; fold                           ; (nigh) universal code folding
           ;;(format +onsave)  ; automated prettiness
           ;;god               ; run Emacs commands without modifier keys
           lispy                   ; vim for lisp, for people who don't like vim
           multiple-cursors        ; editing in many places at once
           ;;objed             ; text object editing for the innocent
           ;;parinfer          ; turn lisp into python, sort of
           rotate-text           ; cycle region at point between text candidates
           snippets              ; my elves. They type so I don't have to
           word-wrap             ; soft wrapping with language-aware indent

           :emacs
           dired         ; making dired pretty [functional]
           electric      ; smarter, keyword-based electric-indent
           ibuffer       ; interactive buffer management
           undo          ; persistent, smarter undo for your inevitable mistakes
           vc            ; version-control and Emacs, sitting in a tree

           :term
           eshell               ; a consistent, cross-platform shell (WIP)
           ;; shell             ; a terminal REPL for Emacs
           ;;term              ; terminals in Emacs
           vterm                        ; another terminals in Emacs

           :checkers
           syntax              ; tasing you for every semicolon you forget
           ;; ;;(spell +flyspell) ; tasing you for misspelling mispelling
           ;; ;;grammar           ; tasing grammar mistake every you make

           :tools
           ;;ansible
           ;;biblio            ; Writes a PhD for you (citation needed)
           (debugger +lsp)   ; FIXME stepping through code, to help you add bugs
           direnv
           ;; (hammer +spotify +container)
           docker
           ;;editorconfig      ; let someone else argue about tabs vs spaces
           ;;ein               ; tame Jupyter notebooks with emacs
           (eval +overlay)   ; run code, run (also, repls)
           ;;gist              ; interacting with github gists
           (lookup              ; helps you navigate your code and documentation
            +docsets)           ; ...or in Dash docsets locally
           (lsp +eglot)
           ;;macos             ; MacOS-specific commands
           magit                        ; a git porcelain for Emacs
           make                         ; run make tasks from Emacs
           (pass
            +auth)                      ; password manager for nerds
           pdf                          ; pdf enhancements
           ;;prodigy           ; FIXME managing external services & code builders
           ;;rgb               ; creating color strings
           ;;terraform         ; infrastructure as code
           tmux                       ; an API for interacting with tmux
           tree-sitter                ; syntax and parsing, sitting in a tree...
           ;;upload            ; map local to remote projects via ssh/ftp
           ;;wakatime

           :os
           ;; (:if IS-MAC macos)  ; improve compatibility with macOS
           ;;tty               ; improve the terminal Emacs experience

           :lang
           ;;agda              ; types of types of types of types...
           ;;assembly          ; assembly for fun or debugging
           ;;beancount         ; mind the GAAP
           (cc +lsp)     ; C/C++/Obj-C madness
           clojure       ; java with a lisp
           common-lisp   ; if you've seen one lisp, you've seen them all
           ;;coq               ; proofs-as-programs
           ;;crystal           ; ruby at the speed of c
           ;;csharp            ; unity, .NET, and mono shenanigans
           data                 ; config/data formats
           ;;(dart +flutter)   ; paint ui and not much else
           ;;dhall
           ;;elixir            ; erlang done right
           ;;elm               ; care for a cup of TEA?
           emacs-lisp                   ; drown in parentheses
           ;;erlang            ; an elegant language for a more civilized age
           ;;ess               ; emacs speaks statistics
           ;;factor
           ;;faust             ; dsp, but you get to keep your soul
           ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
           ;;fsharp           ; ML stands for Microsoft's Language
           ;;fstar             ; (dependent) types and (monadic) effects and Z3
           ;;gdscript          ; the language you waited for
           ;;(go +lsp)         ; the hipster dialect
           ;;(graphql +lsp)    ; Give queries a REST
           ;;(haskell +lsp)    ; a language that's lazier than I am
           ;;hy                ; readability of scheme w/ speed of python
           ;;idris             ;
           json                         ; At least it ain't XML
           (java +lsp
                 +tree-sitter)     ; the poster child for carpal tunnel syndrome
           ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
           ;;julia             ; a better, faster MATLAB
           ;;kotlin            ; a better, slicker Java(Script)
           ;;latex             ; writing papers in Emacs has never been so fun
           ;;lean
           ;;ledger            ; an accounting system in Emacs
           ;;lua               ; one-based indices? one-based indices
           markdown      ; writing docs for people to ignore
           ;;nim               ; python + lisp at the speed of c
           nix           ; I hereby declare "nix geht mehr!"
           ;;ocaml             ; an objective camel
           (org          ; organize your plain life in plain text
            +roam2       ; TODO: upgrade to +roam2
            +dragndrop   ; drag & drop files/images into org buffers
            ;;+hugo            ; use Emacs for hugo blogging
            +ipython     ; ipython/jupyter support for babel
            +pandoc      ; export-with-pandoc support
            ;; +pomodoro    ; be fruitful with the tomato technique
            +noter
            +present
            +pretty
            +journal)                   ; using org-mode for presentations
           ;;perl              ; write code no one else can comprehend
           ;;php               ; perl's insecure younger brother
           ;;plantuml          ; diagrams for confusing people more
           ;;purescript        ; javascript, but functional
           python              ; beautiful is better than ugly
           ;;qt                ; the 'cutest' gui framework ever
           ;;racket            ; a DSL for DSLs
           ;;raku              ; the artist formerly known as perl6
           rest                         ; Emacs as a REST client
           ;;rst               ; ReST in peace
           (ruby +rbenv
                 +rails
                 +tree-sitter) ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
           ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
           (scala +lsp
                  +tree-sitter)      ; java, but good
           (scheme +guile)           ; a fully conniving family of lisps
           sh                        ; she sells {ba,z,fi}sh shells on the C xor
           ;;sml
           ;;solidity          ; do you need a blockchain? No.
           ;;swift             ; who asked for emoji variables?
           ;;terra             ; Earth and Moon in alignment for performance.
           ;;web               ; the tubes
           yaml                         ; JSON, but readable
           ;;zig               ; C, but simpler

           :email
           (mu4e +org +gmail)
           ;; (notmuch +afew +org)
           ;;(wanderlust +gmail)

           ;; Applications are complex and opinionated modules that transform Emacs
           ;; toward a specific purpose. They may have additional dependencies and
           ;; should be loaded late.
           :app
           calendar
           ;;emms
           ;;everywhere        ; *leave* Emacs!? You must be joking
           ;; irc               ; how neckbeards socialize
           (rss +org)                   ; emacs as an RSS reader
           ;;twitter           ; twitter client https://twitter.com/vnought

           :config
           literate
           (default +bindings +smartparens))
#+end_src

* doom dashboard

#+begin_src emacs-lisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-loaded)
#+end_src

* global subword mode

#+begin_src emacs-lisp
;; (global-subword-mode 1)
#+end_src

* splits

#+begin_src emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

* transparency

#+begin_src emacs-lisp
(unless (string= "" (shell-command-to-string "pgrep stumpwm"))
  (set-frame-parameter (selected-frame) 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90)))
#+end_src

* org modern

#+begin_src emacs-lisp
(global-org-modern-mode)
#+end_src

* modus themes

#+begin_src emacs-lisp
(after! modus-themes
  (setq modus-themes-syntax '(faint alt-syntax green-strings yellow-comments))
  (setq modus-themes-italic-constructs nil
        modus-themes-bold-constructs nil
        modus-themes-variable-pitch-ui nil
        modus-themes-mixed-fonts nil)

  (setq modus-themes-prompts '(bold))
  (setq modus-themes-completions nil)
  (setq modus-themes-org-blocks 'gray-background))
#+end_src

* soccer.el
#+begin_src emacs-lisp
(setq beno-custom-lib "~/Code/dotfiles/lib/")
(add-to-list 'load-path beno-custom-lib)
(require 'soccer)
(map! :leader
          (:prefix-map ("o" . "open")
           (:prefix ("S" . "soccer")
            :desc "Favorite fixtures" "S" #'list-soccer-fixtures
            :desc "League fixtures" "s" #'list-league-fixtures
            :desc "Followed leagues" "l" #'list-soccer-leagues
            :desc "Followed teams" "t" #'list-soccer-teams
            :desc "Teams fixtures" "T" #'list-soccer-team-fixtures
            :desc "Follow league" "f" #'soccer-follow-league
            :desc "Unfollow league" "U" #'soccer-unfollow-league
            :desc "Unfollow team" "u" #'soccer-unfollow-team
            :desc "Follow team" "F" #'soccer-follow-team)))
#+end_src

* eww
#+begin_src emacs-lisp
(after! eww
  (eww-toggle-fonts))
#+end_src

* gpt
#+begin_src emacs-lisp
(defun beno-gpt-key ()
  "Read gpt secret from authsource."
  (funcall (plist-get (car (auth-source-search :host gpt-api-key))
                      :secret)))
(map! :leader
      :desc "gpt"
      :n "o g"
      'gptel)

(after! gptel
  (setq gpt-api-key "api.openai.com"
        gptel-default-mode 'org-mode
        gptel-api-key #'beno-gpt-key))
#+end_src

* clojure
** cider
#+begin_src emacs-lisp :results silent
(after! cider-repl
  (add-hook 'before-save-hook 'cider-format-buffer t t)

  (defun portal.api/open ()
    (interactive)
    (cider-nrepl-sync-request:eval
     "(do (ns dev) (def portal ((requiring-resolve 'portal.api/open) {:theme :portal.colors/material-ui})) (add-tap (requiring-resolve 'portal.api/submit)))"))

  (defun portal.api/clear ()
    (interactive)
    (cider-nrepl-sync-request:eval "(portal.api/clear)"))

  (defun portal.api/close ()
    (interactive)
    (cider-nrepl-sync-request:eval "(portal.api/close)"))

  (map! :map clojure-mode-map
        :localleader
        :desc "open portal"  :n "o" #'portal.api/open
        :desc "close portal" :n "q" #'portal.api/close
        :desc "clear portal" :n "l" #'portal.api/clear)

  ;; NOTE: You do need to have portal on the class path
  (setq cider-clojure-cli-aliases ":portal"))
#+end_src
* find file in dotfiles
#+begin_src emacs-lisp
(defun beno-find-file-in-dotfiles ()
  "Search for a file in `dotfiles'."
  (interactive)
  (doom-project-find-file "~/Code/dotfiles"))

(map! :map doom-leader-map
      "f p" #'beno-find-file-in-dotfiles)
#+end_src
* search related advices
#+begin_src emacs-lisp
(defadvice! beno-recenter-consult-line (&rest _)
  :after #'consult-line
  (evil-scroll-line-to-center nil))

(defadvice! beno-recenter-after-search (&rest _)
  :after #'evil-ex-search-word-forward
  (evil-scroll-line-to-center nil))

(defadvice! beno-recenter-after-search (&rest _)
  :after #'evil-ex-search-next
  (evil-scroll-line-to-center nil))

(defadvice! beno-recenter-after-search (&rest _)
  :after #'evil-ex-search-previous
  (evil-scroll-line-to-center nil))
#+end_src
* scheme
#+begin_src emacs-lisp
(after! scheme
  (set-popup-rules!
    '(("^\\*[gG]eiser \\(dbg\\|xref\\|messages\\)\\*$" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
      ("^\\*Geiser documentation\\*$" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right)
      ("^\\*Geiser .+ REPL" :size 0.40 :vslot -4 :select t :quit nil :ttl t :side 'right))))
#+end_src

* vterm
** clear scrollback
#+begin_src emacs-lisp
(after! vterm
  (setq vterm-clear-scrollback-when-clearing t))
#+end_src
** use nushell in vterm
#+begin_src emacs-lisp
(after! vterm
  (setq vterm-shell "/run/current-system/sw/bin/nu")
  (setq vterm-shell "/bin/zsh")
  )
#+end_src
* catppuccin theme
Commented out to avoid recursive loading bug
#+begin_src emacs-lisp
;; (setq catppuccin-flavor 'frappe) ;; or 'latte, 'macchiato, or 'mocha, 'frappe
;; (setq catppuccin-flavor 'latte) ;; or 'latte, 'macchiato, or 'mocha, 'frappe
;; (catppuccin-reload)
#+end_src
